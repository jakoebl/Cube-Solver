# Identity
identity_old = ['u1', 'u2', 'u3', 'u4', 'u5', 'u6', 'u7', 'u8',
            'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8',
            'l1', 'l2', 'l3', 'l4', 'l5', 'l6', 'l7', 'l8',
            'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8',
            'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8',
            'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8']

identity = ['u', 'u', 'u', 'u', 'u', 'u', 'u', 'u',
            'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f',
            'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l',
            'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b',
            'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r',
            'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd']
# Moves
U = [2, 3, 4, 5, 6, 7, 0, 1, 16, 17, 18, 11, 12, 13, 14, 15, 24, 25, 26, 19, 20, 21, 22, 23, 32, 33, 34, 27, 28, 29, 30, 31, 8, 9, 10, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
Up = [6, 7, 0, 1, 2, 3, 4, 5, 32, 33, 34, 11, 12, 13, 14, 15, 8, 9, 10, 19, 20, 21, 22, 23, 16, 17, 18, 27, 28, 29, 30, 31, 24, 25, 26, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
U2 = [4, 5, 6, 7, 0, 1, 2, 3, 24, 25, 26, 11, 12, 13, 14, 15, 32, 33, 34, 19, 20, 21, 22, 23, 8, 9, 10, 27, 28, 29, 30, 31, 16, 17, 18, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]

F = [0, 1, 2, 3, 38, 39, 32, 7, 10, 11, 12, 13, 14, 15, 8, 9, 16, 17, 4, 5, 6, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 42, 33, 34, 35, 36, 37, 40, 41, 18, 19, 20, 43, 44, 45, 46, 47]
Fp = [0, 1, 2, 3, 18, 19, 20, 7, 14, 15, 8, 9, 10, 11, 12, 13, 16, 17, 40, 41, 42, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 6, 33, 34, 35, 36, 37, 4, 5, 38, 39, 32, 43, 44, 45, 46, 47]
F2 = [0, 1, 2, 3, 40, 41, 42, 7, 12, 13, 14, 15, 8, 9, 10, 11, 16, 17, 38, 39, 32, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 20, 33, 34, 35, 36, 37, 18, 19, 4, 5, 6, 43, 44, 45, 46, 47]

L = [8, 1, 2, 3, 4, 5, 14, 15, 40, 9, 10, 11, 12, 13, 46, 47, 18, 19, 20, 21, 22, 23, 16, 17, 24, 25, 6, 7, 0, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 28, 41, 42, 43, 44, 45, 26, 27]
Lp = [28, 1, 2, 3, 4, 5, 26, 27, 0, 9, 10, 11, 12, 13, 6, 7, 22, 23, 16, 17, 18, 19, 20, 21, 24, 25, 46, 47, 40, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 8, 41, 42, 43, 44, 45, 14, 15]
L2 = [40, 1, 2, 3, 4, 5, 46, 47, 28, 9, 10, 11, 12, 13, 26, 27, 20, 21, 22, 23, 16, 17, 18, 19, 24, 25, 14, 15, 8, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0, 41, 42, 43, 44, 45, 6, 7]


B = [22, 23, 16, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 46, 17, 18, 19, 20, 21, 44, 45, 26, 27, 28, 29, 30, 31, 24, 25, 32, 33, 0, 1, 2, 37, 38, 39, 40, 41, 42, 43, 34, 35, 36, 47]
Bp =[34, 35, 36, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 2, 17, 18, 19, 20, 21, 0, 1, 30, 31, 24, 25, 26, 27, 28, 29, 32, 33, 44, 45, 46, 37, 38, 39, 40, 41, 42, 43, 22, 23, 16, 47]
B2 = [44, 45, 46, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 36, 17, 18, 19, 20, 21, 34, 35, 28, 29, 30, 31, 24, 25, 26, 27, 32, 33, 22, 23, 16, 37, 38, 39, 40, 41, 42, 43, 0, 1, 2, 47]

R = [0, 1, 30, 31, 24, 5, 6, 7, 8, 9, 2, 3, 4, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 44, 25, 26, 27, 28, 29, 42, 43, 34, 35, 36, 37, 38, 39, 32, 33, 40, 41, 10, 11, 12, 45, 46, 47]
Rp = [0, 1, 10, 11, 12, 5, 6, 7, 8, 9, 42, 43, 44, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 4, 25, 26, 27, 28, 29, 2, 3, 38, 39, 32, 33, 34, 35, 36, 37, 40, 41, 30, 31, 24, 45, 46, 47]
R2 = [0, 1, 42, 43, 44, 5, 6, 7, 8, 9, 30, 31, 24, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 12, 25, 26, 27, 28, 29, 10, 11, 36, 37, 38, 39, 32, 33, 34, 35, 40, 41, 2, 3, 4, 45, 46, 47]


D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 15, 16, 17, 18, 19, 12, 13, 14, 23, 24, 25, 26, 27, 20, 21, 22, 31, 32, 33, 34, 35, 28, 29, 30, 39, 42, 43, 44, 45, 46, 47, 40, 41]
Dp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 15, 16, 17, 18, 19, 28, 29, 30, 23, 24, 25, 26, 27, 36, 37, 38, 31, 32, 33, 34, 35, 12, 13, 14, 39, 46, 47, 40, 41, 42, 43, 44, 45]
D2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 28, 29, 30, 15, 16, 17, 18, 19, 36, 37, 38, 23, 24, 25, 26, 27, 12, 13, 14, 31, 32, 33, 34, 35, 20, 21, 22, 39, 44, 45, 46, 47, 40, 41, 42, 43]


# Lists
moves = [U, Up, U2, F, Fp, F2, L, Lp, L2, B, Bp, B2, R, Rp, R2, D, Dp, D2]

move_string = ["U", "Up", "U2", "F", "Fp", "F2", "L", "Lp", "L2", "B", "Bp", "B2", "R", "Rp", "R2", "D", "Dp", "D2"]

move_arduino = ["U", "u", "V", "F", "f", "G", "L", "l", "M", "B", "b", "C", "R", "r", "S", "D", "d", "E"]

moves_g2 = [U, Up, U2, F2, L, Lp, L2, B2, R, Rp, R2, D, Dp, D2]

moves_g3 = [U, Up, U2, F2, L2, B2, R2, D, Dp, D2]

moves_g4 = [U2, F2, L2, B2, R2, D2]

moves_inverse = [Up, U, U2, Fp, F, F2, Lp, L, L2, Bp, B, B2, Rp, R, R2, Dp, D, D2]


def translate(move_list, move_set):
    result = []
    for move in move_list:
        result.append(moves.index(move_set[move]))
    return result


def invert(move_list):
    move_list.reverse()
    for index in range(len(move_list)):
        move_list[index] = moves_inverse.index(moves[int((move_list[index]))])
    return move_list


def moves_string(moves):
    result = ""
    for move in moves:
        result += move_string[move] + " "
    return result


def moves_arduino(moves):
    result = ""
    for element in moves:
        result += move_arduino[element]
    return result


side_U = [[], 0, 2, 1]
side_F = [[], 3, 5, 4]
side_L = [[], 6, 8, 7]
side_B = [[], 9, 11, 10]
side_R = [[], 12, 14, 13]
side_D = [[], 15, 17, 16]

moves_by_side = (side_U, side_F, side_L, side_B, side_R, side_D)


def cancel(list1, list2):
    done = False
    while not done:
        if not list1:
            return list2
        if not list2:
            return list1
        for element in moves_by_side:
            if list1[-1] in element and list2[0] in element:
                if (element.index(list1[-1]) + element.index(list2[0])) % 4 == 0:
                    list1.pop()
                else:
                    list1[-1] = element[(element.index(list1[-1]) + element.index(list2[0])) % 4]
                list2.pop(0)
                done = False
                break
            else:
                done = True
    return list1 + list2
